// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsApp.Core.Domain.Entities.ArticleEntity;
using NewsApp.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NewsApp.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    [Migration("20250508083838_AddMissingCreatedColumnOnArticleTable")]
    partial class AddMissingCreatedColumnOnArticleTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "news", "article_status", new[] { "draft", "published", "unpublished" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("article_id_sequence", "news")
                .IncrementsBy(10);

            modelBuilder.HasSequence("user_id_sequence", "client")
                .IncrementsBy(10);

            modelBuilder.Entity("NewsApp.Core.Domain.ArticleEntity.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "article_id_sequence", "news");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<DateTimeOffset?>("Published")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published");

                    b.Property<ArticleStatus>("Status")
                        .HasColumnType("news.article_status")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("Content", "NewsApp.Core.Domain.ArticleEntity.Article.Content#Content", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("content");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "NewsApp.Core.Domain.ArticleEntity.Article.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_article");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_article_user_id");

                    b.ToTable("article", "news");
                });

            modelBuilder.Entity("NewsApp.Core.Domain.UserEntity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "user_id_sequence", "client");

                    b.Property<string>("normalized_email")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("normalized_email")
                        .HasComputedColumnSql("upper(email)", true);

                    b.ComplexProperty<Dictionary<string, object>>("Email", "NewsApp.Core.Domain.UserEntity.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PersonalName", "NewsApp.Core.Domain.UserEntity.User.PersonalName#PersonalName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("surname");
                        });

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("normalized_email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_normalized_email");

                    b.ToTable("user", "client");
                });

            modelBuilder.Entity("NewsApp.Core.Domain.ArticleEntity.Article", b =>
                {
                    b.HasOne("NewsApp.Core.Domain.UserEntity.User", null)
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_article_user_user_id");
                });

            modelBuilder.Entity("NewsApp.Core.Domain.UserEntity.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
